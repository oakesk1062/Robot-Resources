# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from dofbot_info/kinemaricsRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class kinemaricsRequest(genpy.Message):
  _md5sum = "11d857e8542c0047afc9d3b13061446f"
  _type = "dofbot_info/kinemaricsRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# request
float64 tar_x
float64 tar_y
float64 tar_z
float64 Roll
float64 Pitch
float64 Yaw
float64 cur_joint1
float64 cur_joint2
float64 cur_joint3
float64 cur_joint4
float64 cur_joint5
float64 cur_joint6
string  kin_name
"""
  __slots__ = ['tar_x','tar_y','tar_z','Roll','Pitch','Yaw','cur_joint1','cur_joint2','cur_joint3','cur_joint4','cur_joint5','cur_joint6','kin_name']
  _slot_types = ['float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       tar_x,tar_y,tar_z,Roll,Pitch,Yaw,cur_joint1,cur_joint2,cur_joint3,cur_joint4,cur_joint5,cur_joint6,kin_name

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(kinemaricsRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.tar_x is None:
        self.tar_x = 0.
      if self.tar_y is None:
        self.tar_y = 0.
      if self.tar_z is None:
        self.tar_z = 0.
      if self.Roll is None:
        self.Roll = 0.
      if self.Pitch is None:
        self.Pitch = 0.
      if self.Yaw is None:
        self.Yaw = 0.
      if self.cur_joint1 is None:
        self.cur_joint1 = 0.
      if self.cur_joint2 is None:
        self.cur_joint2 = 0.
      if self.cur_joint3 is None:
        self.cur_joint3 = 0.
      if self.cur_joint4 is None:
        self.cur_joint4 = 0.
      if self.cur_joint5 is None:
        self.cur_joint5 = 0.
      if self.cur_joint6 is None:
        self.cur_joint6 = 0.
      if self.kin_name is None:
        self.kin_name = ''
    else:
      self.tar_x = 0.
      self.tar_y = 0.
      self.tar_z = 0.
      self.Roll = 0.
      self.Pitch = 0.
      self.Yaw = 0.
      self.cur_joint1 = 0.
      self.cur_joint2 = 0.
      self.cur_joint3 = 0.
      self.cur_joint4 = 0.
      self.cur_joint5 = 0.
      self.cur_joint6 = 0.
      self.kin_name = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_12d().pack(_x.tar_x, _x.tar_y, _x.tar_z, _x.Roll, _x.Pitch, _x.Yaw, _x.cur_joint1, _x.cur_joint2, _x.cur_joint3, _x.cur_joint4, _x.cur_joint5, _x.cur_joint6))
      _x = self.kin_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 96
      (_x.tar_x, _x.tar_y, _x.tar_z, _x.Roll, _x.Pitch, _x.Yaw, _x.cur_joint1, _x.cur_joint2, _x.cur_joint3, _x.cur_joint4, _x.cur_joint5, _x.cur_joint6,) = _get_struct_12d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.kin_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.kin_name = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_12d().pack(_x.tar_x, _x.tar_y, _x.tar_z, _x.Roll, _x.Pitch, _x.Yaw, _x.cur_joint1, _x.cur_joint2, _x.cur_joint3, _x.cur_joint4, _x.cur_joint5, _x.cur_joint6))
      _x = self.kin_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 96
      (_x.tar_x, _x.tar_y, _x.tar_z, _x.Roll, _x.Pitch, _x.Yaw, _x.cur_joint1, _x.cur_joint2, _x.cur_joint3, _x.cur_joint4, _x.cur_joint5, _x.cur_joint6,) = _get_struct_12d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.kin_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.kin_name = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_12d = None
def _get_struct_12d():
    global _struct_12d
    if _struct_12d is None:
        _struct_12d = struct.Struct("<12d")
    return _struct_12d
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from dofbot_info/kinemaricsResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class kinemaricsResponse(genpy.Message):
  _md5sum = "906df963bc5a51f2145b13de1507f439"
  _type = "dofbot_info/kinemaricsResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# response
float64 joint1
float64 joint2
float64 joint3
float64 joint4
float64 joint5
float64 joint6
float64 x
float64 y
float64 z
float64 Roll
float64 Pitch
float64 Yaw



"""
  __slots__ = ['joint1','joint2','joint3','joint4','joint5','joint6','x','y','z','Roll','Pitch','Yaw']
  _slot_types = ['float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       joint1,joint2,joint3,joint4,joint5,joint6,x,y,z,Roll,Pitch,Yaw

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(kinemaricsResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.joint1 is None:
        self.joint1 = 0.
      if self.joint2 is None:
        self.joint2 = 0.
      if self.joint3 is None:
        self.joint3 = 0.
      if self.joint4 is None:
        self.joint4 = 0.
      if self.joint5 is None:
        self.joint5 = 0.
      if self.joint6 is None:
        self.joint6 = 0.
      if self.x is None:
        self.x = 0.
      if self.y is None:
        self.y = 0.
      if self.z is None:
        self.z = 0.
      if self.Roll is None:
        self.Roll = 0.
      if self.Pitch is None:
        self.Pitch = 0.
      if self.Yaw is None:
        self.Yaw = 0.
    else:
      self.joint1 = 0.
      self.joint2 = 0.
      self.joint3 = 0.
      self.joint4 = 0.
      self.joint5 = 0.
      self.joint6 = 0.
      self.x = 0.
      self.y = 0.
      self.z = 0.
      self.Roll = 0.
      self.Pitch = 0.
      self.Yaw = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_12d().pack(_x.joint1, _x.joint2, _x.joint3, _x.joint4, _x.joint5, _x.joint6, _x.x, _x.y, _x.z, _x.Roll, _x.Pitch, _x.Yaw))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 96
      (_x.joint1, _x.joint2, _x.joint3, _x.joint4, _x.joint5, _x.joint6, _x.x, _x.y, _x.z, _x.Roll, _x.Pitch, _x.Yaw,) = _get_struct_12d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_12d().pack(_x.joint1, _x.joint2, _x.joint3, _x.joint4, _x.joint5, _x.joint6, _x.x, _x.y, _x.z, _x.Roll, _x.Pitch, _x.Yaw))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 96
      (_x.joint1, _x.joint2, _x.joint3, _x.joint4, _x.joint5, _x.joint6, _x.x, _x.y, _x.z, _x.Roll, _x.Pitch, _x.Yaw,) = _get_struct_12d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_12d = None
def _get_struct_12d():
    global _struct_12d
    if _struct_12d is None:
        _struct_12d = struct.Struct("<12d")
    return _struct_12d
class kinemarics(object):
  _type          = 'dofbot_info/kinemarics'
  _md5sum = 'd4d7066ccc45dfff67e7b0b528d14e9b'
  _request_class  = kinemaricsRequest
  _response_class = kinemaricsResponse
